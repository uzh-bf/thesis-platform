generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model ProposalStatus {
  key       String     @id @unique
  proposals Proposal[]
}

model ApplicationStatus {
  key          String                @id @unique
  applications ProposalApplication[]
}

model ProposalType {
  key       String     @id @unique
  proposals Proposal[]
}

model ProposalFeedbackType {
  key       String                 @id @unique
  proposals UserProposalFeedback[]
}

model Account {
  id String @id @unique @default(uuid())

  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  ext_expires_in           Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id String @id @unique @default(uuid())

  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?   @db.Text

  role String @default("UNSET")

  accounts Account[]

  ownedProposals      Proposal[]
  supervisedProposals UserProposalSupervision[]
  createdFeedbacks    UserProposalFeedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model TopicArea {
  id String @id @unique @default(uuid())

  slug String @unique
  name String @unique

  proposals Proposal[]
}

model ProposalAttachment {
  id String @id @unique @default(uuid())

  name String
  href String
  type String

  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ApplicationAttachment {
  id String @id @unique @default(uuid())

  name String
  href String
  type String

  proposalApplication   ProposalApplication @relation(fields: [proposalApplicationId], references: [id], onDelete: Cascade)
  proposalApplicationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Proposal {
  id String @id @unique @default(uuid())

  title                    String
  description              String  @db.Text
  language                 String
  studyLevel               String
  timeFrame                String?
  additionalStudentComment String? @db.Text

  topicArea     TopicArea @relation(fields: [topicAreaSlug], references: [slug])
  topicAreaSlug String

  attachments ProposalAttachment[]

  type    ProposalType @relation(fields: [typeKey], references: [key])
  typeKey String

  status    ProposalStatus @relation(fields: [statusKey], references: [key])
  statusKey String         @default("OPEN")

  ownedByUser      User?   @relation(fields: [ownedByUserEmail], references: [email], onDelete: SetNull)
  ownedByUserEmail String?
  ownedByStudent   String?

  supervisedBy      UserProposalSupervision[]
  applications      ProposalApplication[]
  receivedFeedbacks UserProposalFeedback[]
  AdminInfo         AdminInfo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProposalApplication {
  id String @id @unique @default(uuid())

  status    ApplicationStatus @relation(fields: [statusKey], references: [key])
  statusKey String            @default("OPEN")

  email               String
  matriculationNumber String
  fullName            String
  plannedStartAt      DateTime
  motivation          String   @db.Text

  attachments ApplicationAttachment[]

  proposal   Proposal @relation(fields: [proposalId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  proposalId String

  supervision   UserProposalSupervision? @relation(fields: [supervisionId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  supervisionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([proposalId, email])
}

model UserProposalSupervision {
  id String @id @unique @default(uuid())

  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String   @unique

  responsible     Responsible? @relation(fields: [responsibleId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  responsibleId   String?
  supervisor      User?        @relation(fields: [supervisorEmail], references: [email], onUpdate: NoAction, onDelete: NoAction)
  supervisorEmail String?

  application ProposalApplication[]

  studentEmail String?
  studyLevel   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model UserProposalFeedback {
  id String @id @unique @default(uuid())

  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String

  user      User   @relation(fields: [userEmail], references: [email], onUpdate: NoAction, onDelete: NoAction)
  userEmail String

  type    ProposalFeedbackType @relation(fields: [typeKey], references: [key])
  typeKey String

  reason  String
  comment String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([proposalId, userEmail])
}

model AdminInfo {
  id String @id @unique @default(uuid())

  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String

  mailReceived     String?
  status           String?
  olatCapturedDate DateTime?
  submissionDate   DateTime?
  grade            Float?
  olatGradeDate    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Responsible {
  id String @id @unique @default(uuid())

  name  String
  email String @unique

  UserProposalSupervisions UserProposalSupervision[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
