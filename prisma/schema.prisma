generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// enum UserRole {
//   STUDENT
//   SUPERVISOR
//   ADMIN
// }

model ProposalStatus {
  key       String     @id @unique
  proposals Proposal[]
}

model ProposalType {
  key       String     @id @unique
  proposals Proposal[]
}

model ProposalFeedbackType {
  key       String                 @id @unique
  proposals UserProposalFeedback[]
}

model Account {
  id String @id @default(cuid())

  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id String @id @default(cuid())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role String @default("UNSET")

  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  assignedProposals   UserProposalAssignment[]
  supervisedProposals UserProposalSupervision[]
  appliedFor          UserProposalApplication[]
  createdFeedbacks    UserProposalFeedback[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TopicArea {
  id String @id @default(cuid())

  name String

  proposals Proposal[]
}

model ProposalAttachment {
  id String @id @default(cuid())

  href String

  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String
}

model Proposal {
  id String @id @unique @default(cuid())

  title       String
  description String

  plannedStartAt DateTime?
  plannedEndAt   DateTime?

  attachments ProposalAttachment[]

  type    ProposalType @relation(fields: [typeKey], references: [key])
  typeKey String

  status    ProposalStatus @relation(fields: [statusKey], references: [key])
  statusKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  assignedTo        UserProposalAssignment[]
  supervisedBy      UserProposalSupervision[]
  applications      UserProposalApplication[]
  receivedFeedbacks UserProposalFeedback[]

  // TODO: student selects one or multiple topic areas?
  // TODO: BW can reassign topic areas?
  topicAreas TopicArea[]
}

model UserProposalAssignment {
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  acceptedBySupervisor Boolean @default(false)
  acceptedByStudent    Boolean @default(false)

  @@unique([proposalId, userId])
}

model UserProposalSupervision {
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([proposalId, userId])
}

model UserProposalApplication {
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([proposalId, userId])
}

model UserProposalFeedback {
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  type    ProposalFeedbackType @relation(fields: [typeKey], references: [key])
  typeKey String

  description String

  @@unique([proposalId, userId])
}
