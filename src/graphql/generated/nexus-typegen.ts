/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSONObject";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSONObject";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  ProposalStatus: "CLOSED" | "MATCHED" | "OPEN" | "REVIEWED" | "SUBMITTED" | "WAITING_FOR_STUDENT" | "WAITING_FOR_SUPERVISOR"
  ProposalType: "STUDENT" | "SUPERVISOR"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  File: any
  JSONObject: any
}

export interface NexusGenObjects {
  Proposal: { // root type
    description: string; // String!
    id: string; // String!
    language: string; // String!
    ownedBy: NexusGenRootTypes['User']; // User!
    plannedStartAt?: NexusGenScalars['DateTime'] | null; // DateTime
    statusKey: NexusGenEnums['ProposalStatus']; // ProposalStatus!
    studyLevel: string; // String!
    supervisedBy?: NexusGenRootTypes['User'] | null; // User
    title: string; // String!
    topicAreas: NexusGenRootTypes['TopicArea'][]; // [TopicArea!]!
    typeKey: NexusGenEnums['ProposalType']; // ProposalType!
  }
  Query: {};
  TopicArea: { // root type
    id?: string | null; // String
    name?: string | null; // String
  }
  User: { // root type
    email: string; // String!
    id: string; // String!
    name: string; // String!
    role: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Proposal: { // field return type
    description: string; // String!
    id: string; // String!
    language: string; // String!
    ownedBy: NexusGenRootTypes['User']; // User!
    plannedStartAt: NexusGenScalars['DateTime'] | null; // DateTime
    statusKey: NexusGenEnums['ProposalStatus']; // ProposalStatus!
    studyLevel: string; // String!
    supervisedBy: NexusGenRootTypes['User'] | null; // User
    title: string; // String!
    topicAreas: NexusGenRootTypes['TopicArea'][]; // [TopicArea!]!
    typeKey: NexusGenEnums['ProposalType']; // ProposalType!
  }
  Query: { // field return type
    proposals: NexusGenRootTypes['Proposal'][]; // [Proposal!]!
  }
  TopicArea: { // field return type
    id: string | null; // String
    name: string | null; // String
  }
  User: { // field return type
    email: string; // String!
    id: string; // String!
    name: string; // String!
    role: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Proposal: { // field return type name
    description: 'String'
    id: 'String'
    language: 'String'
    ownedBy: 'User'
    plannedStartAt: 'DateTime'
    statusKey: 'ProposalStatus'
    studyLevel: 'String'
    supervisedBy: 'User'
    title: 'String'
    topicAreas: 'TopicArea'
    typeKey: 'ProposalType'
  }
  Query: { // field return type name
    proposals: 'Proposal'
  }
  TopicArea: { // field return type name
    id: 'String'
    name: 'String'
  }
  User: { // field return type name
    email: 'String'
    id: 'String'
    name: 'String'
    role: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}